###############################################################################################
# multistep.version-assemblies.yml
###############################################################################################

# this set of steps calculates the semantic version using GitVersion, then versions
# projects and AssemblyInfo.cs files in the solution.

parameters:
  buildConfiguration: 'Release'
  apiName: ''
  apiDescription: ''  
  productDescription: ''

steps:
    - template: 'step.git-version.yml'

    # this step uses GitVersion to set a few variables that are available across all 
    # stages of the build (by saving them each into a separate artifact file under /variables)
    # To retrieve them, invoke retrieve-build-variables.yml@templates
    # - template: 'azure-pipelines/set-build-variables.yml@templates'

    # this step just saves the version to a file - the whole variables folder will be published
    # as an archive at the end of this stage so that it can be downloaded and used in later stages
    - bash: |
        mkdir -p $(Pipeline.Workspace)/variables
        echo "$(GitVersion.SemVer)" > $(Pipeline.Workspace)/variables/buildVersion
        cat $(Pipeline.Workspace)/variables/buildVersion
      displayName: 'Save buildVersion variable into a file'

    - bash: |
        export CURRENT_DATE_TIME=$(date --utc --iso-8601=seconds)
        echo '##vso[task.setvariable variable=buildTime;]'$CURRENT_DATE_TIME
      displayName: 'Take current time'

    - task: Assembly-Info-NetFramework@2
      displayName: 'Version API'
      inputs:
        Configuration: '${{ parameters.buildConfiguration }}'
        Path: '$(Build.SourcesDirectory)/src/${{ parameters.apiName }}'
        FileNames: '**/AssemblyInfo.cs'
        InsertAttributes: false
        FileEncoding: 'auto'
        WriteBOM: false
        Title: '${{ parameters.apiDescription }}'
        Product: '${{ parameters.productDescription }}'
        Description: 'SemanticVersion=$(GitVersion.FullSemVer); Branch=$(Build.SourceBranch); Commit=$(GitVersion.ShortSha); BuildTime=$(buildTime); BuildConfig=${{ parameters.buildConfiguration }}'
        Company: 'Adaptive Development'
        Copyright: 'Ciprian Toader'
        VersionNumber: '$(GitVersion.AssemblySemVer)'
        FileVersionNumber: '$(GitVersion.AssemblySemFileVer)'
        InformationalVersion: '$(GitVersion.InformationalVersion)'

    - bash: |
        export NUGET_VERSION="$(GitVersion.NuGetVersionV2)-$(GitVersion.BuildMetaData)"
        if [[ $(Build.SourceBranch) == "refs/heads/master" ]]; then
          NUGET_VERSION="$(GitVersion.Major).$(GitVersion.Minor).$(GitVersion.Patch)-$(GitVersion.BuildMetaData)"
        elif [[ $(Build.SourceBranch) == "refs/heads/develop" ]]; then
          # Note: GitVersion increments develop builds automatically so we don't need to append the metadata to ensure uniqueness
          NUGET_VERSION="$(GitVersion.NuGetVersionV2)"
        fi
        echo '##vso[task.setvariable variable=nugetVersion;]'$NUGET_VERSION
      displayName: 'Calculate Nuget version'

    - bash: 'echo nugetVersion: $(nugetVersion)'
      displayName: 'Display Nuget version'
        
    - task: Assembly-Info-NetCore@2
      displayName: 'Version Proxy client'
      inputs:
        Path: '$(Build.SourcesDirectory)/src/${{ parameters.apiName }}Proxy'
        FileNames: '**/*.csproj'
        InsertAttributes: true
        FileEncoding: 'auto'
        WriteBOM: false
        GeneratePackageOnBuild: false
        Authors: 'Ciprian Toader'
        Company: 'Adaptive Development'
        Product: '${{ parameters.productDescription }}'
        Description: '${{ parameters.apiDescription }}'
        VersionNumber: '$(GitVersion.FullSemVer)'
        FileVersionNumber: '$(GitVersion.AssemblySemFileVer)'
        InformationalVersion: '$(GitVersion.InformationalVersion)'
        #PackageVersion: '$(GitVersion.FullSemVer)'
        #PackageVersion: '$(GitVersion.NuGetVersionV2)-$(GitVersion.BuildMetaDataPadded)'
        PackageVersion: '$(nugetVersion)'
